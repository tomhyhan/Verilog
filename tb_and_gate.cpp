#include <iostream>
#include <verilated.h>
#include "verilated_vcd_c.h"
#include "Vand_gate.h" // The header file generated by Verilator

// Define the name of the top-level module
#define TOP_NAME Vand_gate

// The following is a global context object for Verilator, recommended for multi-threaded models
VerilatedContext* contextp = NULL;

// This is the top-level Verilated model object
TOP_NAME* top = NULL;

// The trace file pointer
VerilatedVcdC* tfp = NULL;

// A global simulation time counter
vluint64_t sim_time = 0;

// The main simulation loop function
void step_and_dump_wave();

// The main function where the simulation setup and teardown happens
int main(int argc, char** argv) {
    // Initialize Verilator and command line arguments
    contextp = new VerilatedContext;
    contextp->commandArgs(argc, argv);
    
    // Turn on waveform generation
    contextp->traceEverOn(true);
    
    // Instantiate the Verilog module
    top = new TOP_NAME(contextp);
    
    // Create a trace file object
    tfp = new VerilatedVcdC;
    
    // Tell the design to dump its signals to the trace file
    top->trace(tfp, 99); // 99 is the number of levels of hierarchy to trace
    
    // Open the VCD file for writing
    tfp->open("waveform.vcd");
    
    std::cout << "Starting simulation..." << std::endl;

    // Run the simulation loop
    while (!contextp->gotFinish() && sim_time < 20) {
        // Drive inputs
        top->a = (sim_time >> 0) & 1; // Change 'a' every 1 time unit
        top->b = (sim_time >> 1) & 1; // Change 'b' every 2 time units
        
        // Evaluate the model and dump the waveform
        step_and_dump_wave();
        
        // Print the current state
        std::cout << "Time: " << sim_time << " | a: " << top->a << " | b: " << top->b << " | y: " << top->y << std::endl;
        
        sim_time++;
    }

    // Close the VCD file at the end
    tfp->close();
    
    std::cout << "Simulation finished." << std::endl;

    // Clean up
    delete tfp;
    delete top;
    delete contextp;
    
    return 0;
}

// Function to perform a single simulation step and dump the waveform
void step_and_dump_wave() {
    // Evaluate the model's logic
    top->eval();
    
    // Dump the current state to the waveform file
    tfp->dump(sim_time);
}
